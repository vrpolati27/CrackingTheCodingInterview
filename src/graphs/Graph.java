package graphs;import java.io.File;import java.io.FileNotFoundException;import java.io.IOException;import java.util.*;/** * Created by vinayreddypolati on 7/15/17. */public class Graph{    private boolean isDirected;    private boolean isWeighted;    private int nodesCount;    private Map<String, LinkedList<GraphNode2>> graph;    public Graph(String fileName){        try{            File file = new File(fileName);            /*if(!file.exists()) file.createNewFile();*/            Scanner sc = new Scanner(file);            isDirected = sc.next().equalsIgnoreCase("undirected")?false:true;            isWeighted = sc.next().equalsIgnoreCase("unweighted")?false:true;            nodesCount = sc.nextInt();            graph = new LinkedHashMap(nodesCount);            for(int count=0;count<nodesCount;count++){                graph.put(sc.next(),null);            }            while(sc.hasNext()){                String str1 = sc.next();                String str2 = sc.next();                int weight = Integer.MIN_VALUE;                if(isWeighted) {                    weight = sc.nextInt();                }                GraphNode2 node = new GraphNode2(str2,weight);                if(graph.get(str1)==null){                    LinkedList<GraphNode2> linkedList = new LinkedList();                    linkedList.addFirst(node);                    graph.put(str1,linkedList);                }else{                    graph.get(str1).addFirst(node);                }                /* add reverse Edge if Graph is undirected*/                if(!isDirected){                    GraphNode2 node2 = new GraphNode2(str1,weight);                    if(graph.get(str2)==null){                        LinkedList<GraphNode2> linkedList2 = new LinkedList();                        linkedList2.addFirst(node2);                        graph.put(str2,linkedList2);                    }else{                        graph.get(str2).addFirst(node2);                    }                }            }        }catch(FileNotFoundException ex){            System.out.print(ex.toString());        } catch (IOException e) {            e.printStackTrace();        }    }    public List<GraphNode2> getNeighbors(String node){        return graph.get(node);    }    public void printGraph(){        if(graph!=null)        for(Map.Entry<String,LinkedList<GraphNode2>> en: graph.entrySet()){            System.out.print(en.getKey()+":");            System.out.println(en.getValue());        }    }    public List<String> getAllNodes(){        List<String> nodes = new ArrayList<>(graph.size());        for(Map.Entry<String,LinkedList<GraphNode2>> en:graph.entrySet()){            nodes.add(en.getKey());        } return  nodes;    }    public void depthFirstSearch(){        List<String> nodes = new ArrayList(graph.size());        for(Map.Entry<String,LinkedList<GraphNode2>> en:graph.entrySet()){            nodes.add(en.getKey());        }        Boolean[] visited = new Boolean[graph.size()];        Arrays.fill(visited,false);        for(String str:nodes){            explore(str,visited,nodes);        }    }    private void explore(String node,Boolean[] visited,List<String> nodes){       if(!visited[nodes.indexOf(node)]){           System.out.print(" "+node); visited[nodes.indexOf(node)] = true;           for(GraphNode2 node2:graph.get(node)){               if(!visited[nodes.indexOf(node2.name)])                   explore(node2.name,visited,nodes);           }       }    }    public void breadthFirstSearch(){      List<String> nodes = new ArrayList(graph.size());      for(Map.Entry<String,LinkedList<GraphNode2>> en:graph.entrySet()){          nodes.add(en.getKey());      }      boolean[] visited = new boolean[graph.size()];      Arrays.fill(visited,false);      for(String str:nodes){          explore2(str,visited,nodes);      }    }    private void explore2(String node,boolean[] visited,List<String> nodes){      if(!visited[nodes.indexOf(node)]){          Queue<String> queue = new LinkedList();          queue.add(node);          while (!queue.isEmpty()){              System.out.print(" "+queue.peek()); visited[nodes                      .indexOf(queue.peek())] = true;              for(GraphNode2 node2:graph.get(queue.poll())){                  if(!visited[nodes.indexOf(node2.name)])                     queue.add(node2.name);              }          }      }    }}/* GraphNode for unweighted */class   GraphNode1{    String name;}/* GraphNode for weighted */class GraphNode2{    String name;    int weight;    public GraphNode2(String name,int weight){        this.name = name;        this.weight = weight;    }    @Override    public String toString() {        StringBuilder sb = new StringBuilder();        sb.append(name);        if(this.weight!=Integer.MIN_VALUE) sb.append(" w:"+weight);        return sb.toString();    }}